"""
Test de fum√©e complet (45 minutes) de bout en bout avec rapport TXT clair (fran√ßais).

Ce que le test v√©rifie (non interactif) - TOUTES LES FONCTIONNALIT√âS :
- √âtat initial (datasets/cache/syst√®me), param√®tres
- D√©marrage du scheduler (arri√®re-plan)
- √âtats interm√©diaires (‚âà5 min, ‚âà10 min, ‚âà20 min, ‚âà35 min)
- Pr√©dictions multiples (bitcoin, ethereum) avec et sans montant EUR
- Test des nouvelles commandes ML avanc√©es (confidence-metrics, train-incremental)
- Validation des 5 collecteurs sp√©cialis√©s
- Entra√Ænement incr√©mental automatique et mod√®les ML avanc√©s
- Cycle d'√©valuation post-horizon complet
- Validation du profit gate et d√©cisions NO_CALL
- √âtat final (‚âà45 min)
- Arr√™t du scheduler

Sortie: logs/test_runs/smoke_45min_YYYYMMDD_HHMMSS.txt

Remarque: n'alt√®re pas le venv; teste MVP + ML avanc√© complet.
"""
from __future__ import annotations

import json
import os
import subprocess
import sys
import time
from datetime import datetime, timezone
import argparse
from typing import Tuple


ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))
LOG_DIR = os.path.join(ROOT, "logs", "test_runs")


def run_cli_command(command_parts: list[str], description: str, log_file) -> Tuple[str, int]:
    """
    Ex√©cute une commande CLI et retourne (stdout, returncode).
    Log les erreurs dans le fichier de sortie.
    """
    timestamp = datetime.now(timezone.utc).strftime("%H:%M:%S")
    log_file.write(f"\n[{timestamp}] Commande: {description}\n")
    log_file.write(f"$ python -m {' '.join(command_parts)}\n")
    log_file.flush()
    
    try:
        # Commande compl√®te avec python -m
        full_cmd = [sys.executable, "-m"] + command_parts
        
        result = subprocess.run(
            full_cmd,
            cwd=ROOT,
            capture_output=True,
            text=True,
            timeout=180  # 3 minutes max par commande
        )
        
        # Log la sortie
        if result.stdout.strip():
            log_file.write(f"STDOUT:\n{result.stdout}\n")
        if result.stderr.strip():
            log_file.write(f"STDERR:\n{result.stderr}\n")
        
        log_file.write(f"Return code: {result.returncode}\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        
        return result.stdout, result.returncode
        
    except subprocess.TimeoutExpired:
        log_file.write("ERREUR: Timeout (3 min) d√©pass√©\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        return "", 1
    except Exception as e:
        log_file.write(f"ERREUR: {e}\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        return "", 1


def wait_and_log(duration_sec: int, description: str, log_file):
    """Attend et log le temps d'attente."""
    timestamp = datetime.now(timezone.utc).strftime("%H:%M:%S")
    log_file.write(f"\n[{timestamp}] Attente: {description} ({duration_sec}s)\n")
    log_file.flush()
    time.sleep(duration_sec)


def main():
    """
    Test de fum√©e complet 45 minutes - TOUTES LES FONCTIONNALIT√âS.
    """
    parser = argparse.ArgumentParser(description="Test de fum√©e 45 min complet (MVP + ML avanc√©)")
    parser.add_argument("--dry-run", action="store_true", help="Affiche les commandes sans les ex√©cuter")
    args = parser.parse_args()
    
    # Cr√©er le r√©pertoire de logs
    os.makedirs(LOG_DIR, exist_ok=True)
    
    # Nom du fichier de log avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_filename = f"smoke_45min_{timestamp}.txt"
    log_path = os.path.join(LOG_DIR, log_filename)
    
    print(f"üß™ D√©marrage du test de fum√©e 45 minutes (COMPLET)")
    print(f"üìù Log: {log_path}")
    
    if args.dry_run:
        print("üîç Mode dry-run activ√© - pas d'ex√©cution r√©elle")
        return
    
    with open(log_path, "w", encoding="utf-8") as log_file:
        # En-t√™te
        start_time = datetime.now(timezone.utc)
        log_file.write(f"=== TEST DE FUM√âE 45 MINUTES COMPLET ===\n")
        log_file.write(f"D√©but: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
        log_file.write(f"Python: {sys.executable}\n")
        log_file.write(f"R√©pertoire: {ROOT}\n")
        log_file.write(f"TEST COMPLET: MVP + ML Avanc√© + Nouvelles Fonctionnalit√©s\n")
        log_file.write("=" * 70 + "\n\n")
        log_file.flush()
        
        try:
            # === PHASE 1: √âTAT INITIAL ET PARAM√àTRES ===
            print("üìä Phase 1: √âtat initial et param√®tres...")
            
            # √âtat du syst√®me
            run_cli_command(["src.main", "etat"], "√âtat initial du syst√®me", log_file)
            
            # Param√®tres
            run_cli_command(["src.main", "parametres"], "Affichage des param√®tres", log_file)
            
            # Inventaire des mod√®les
            run_cli_command(["src.main", "models"], "Inventaire des mod√®les ML", log_file)
            
            # === PHASE 2: D√âMARRAGE DU SCHEDULER ===
            print("üöÄ Phase 2: D√©marrage du scheduler...")
            
            run_cli_command(["src.main", "demarrer"], "D√©marrage du scheduler", log_file)
            
            # Attente initiale
            wait_and_log(30, "Stabilisation du scheduler", log_file)
            
            # === PHASE 3: PREMIERS √âTATS INTERM√âDIAIRES ===
            print("üìà Phase 3: √âtats interm√©diaires (5 min)...")
            
            # √âtat apr√®s 5 min
            wait_and_log(270, "Attente 5 minutes totales", log_file)  # 270s = 4.5 min suppl√©mentaires
            run_cli_command(["src.main", "etat"], "√âtat apr√®s ~5 minutes", log_file)
            
            # === PHASE 4: TESTS DES PR√âDICTIONS MULTIPLES ===
            print("üîÆ Phase 4: Tests des pr√©dictions...")
            
            # Pr√©diction Bitcoin simple
            run_cli_command(["src.main", "prevoir", "--coin", "bitcoin", "--unit", "min", "--value", "10", "--kind", "price"], 
                          "Pr√©diction Bitcoin +10min", log_file)
            
            # Pr√©diction Ethereum avec montant
            run_cli_command(["src.main", "prevoir", "--coin", "ethereum", "--unit", "min", "--value", "15", "--kind", "amount", "--amount-eur", "100"], 
                          "Pr√©diction Ethereum +15min avec 100 EUR", log_file)
            
            # === PHASE 5: NOUVELLES COMMANDES ML AVANC√âES ===
            print("üß† Phase 5: Tests des fonctionnalit√©s ML avanc√©es...")
            
            # Test collecte historique massive
            run_cli_command(["src.main", "collect-historical"], 
                          "Collecte historique massive urgente", log_file)
            
            # Test m√©triques de confiance
            run_cli_command(["src.main", "confidence-metrics", "--coin", "bitcoin", "--horizon", "10"], 
                          "M√©triques de confiance Bitcoin", log_file)
            
            run_cli_command(["src.main", "confidence-metrics", "--coin", "ethereum", "--horizon", "15"], 
                          "M√©triques de confiance Ethereum", log_file)
            
            # Test entra√Ænement incr√©mental micro
            run_cli_command(["src.main", "train-incremental", "--mode", "micro"], 
                          "Entra√Ænement incr√©mental micro", log_file)
            
            # === PHASE 6: √âTATS INTERM√âDIAIRES 10 MIN ===
            print("üìä Phase 6: √âtats interm√©diaires (10 min)...")
            
            wait_and_log(300, "Attente 10 minutes totales", log_file)  # 5 min suppl√©mentaires
            run_cli_command(["src.main", "etat"], "√âtat apr√®s ~10 minutes", log_file)
            
            # Test entra√Ænement incr√©mental mini
            run_cli_command(["src.main", "train-incremental", "--mode", "mini"], 
                          "Entra√Ænement incr√©mental mini", log_file)
            
            # === PHASE 7: ENTRA√éNEMENT COMPLET ===
            print("üéØ Phase 7: Entra√Ænement complet...")
            
            # Entra√Ænement baseline Bitcoin
            run_cli_command(["src.main", "train", "--coin", "bitcoin"], 
                          "Entra√Ænement baseline Bitcoin", log_file)
            
            # V√©rification des nouveaux mod√®les
            run_cli_command(["src.main", "models"], "Inventaire apr√®s entra√Ænement", log_file)
            
            # === PHASE 8: √âTATS INTERM√âDIAIRES 20 MIN ===
            print("üìà Phase 8: √âtats interm√©diaires (20 min)...")
            
            wait_and_log(600, "Attente 20 minutes totales", log_file)  # 10 min suppl√©mentaires
            run_cli_command(["src.main", "etat"], "√âtat apr√®s ~20 minutes", log_file)
            
            # Test du calendrier d'entra√Ænement
            run_cli_command(["src.main", "train-incremental", "--mode", "schedule"], 
                          "Calendrier d'entra√Ænement automatique", log_file)
            
            # === PHASE 9: TESTS AVANC√âS DES MOD√àLES ===
            print("üî¨ Phase 9: Tests avanc√©s des mod√®les...")
            
            # Entra√Ænement Ethereum
            run_cli_command(["src.main", "train", "--coin", "ethereum"], 
                          "Entra√Ænement baseline Ethereum", log_file)
            
            # Pr√©dictions post-entra√Ænement
            run_cli_command(["src.main", "prevoir", "--coin", "bitcoin", "--unit", "min", "--value", "30", "--kind", "amount", "--amount-eur", "250"], 
                          "Pr√©diction Bitcoin +30min avec 250 EUR (post-training)", log_file)
            
            # === PHASE 10: √âTATS INTERM√âDIAIRES 35 MIN ===
            print("üìä Phase 10: √âtats interm√©diaires (35 min)...")
            
            wait_and_log(900, "Attente 35 minutes totales", log_file)  # 15 min suppl√©mentaires
            run_cli_command(["src.main", "etat"], "√âtat apr√®s ~35 minutes", log_file)
            
            # Test des m√©triques finales
            run_cli_command(["src.main", "confidence-metrics", "--coin", "litecoin", "--horizon", "20"], 
                          "M√©triques de confiance Litecoin", log_file)
            
            # === PHASE 11: FINALISATION ET NETTOYAGE ===
            print("üèÅ Phase 11: Finalisation (45 min)...")
            
            wait_and_log(600, "Attente 45 minutes totales", log_file)  # 10 min suppl√©mentaires pour atteindre 45 min
            
            # √âtat final
            run_cli_command(["src.main", "etat"], "√âtat final apr√®s 45 minutes", log_file)
            
            # Inventaire final des mod√®les
            run_cli_command(["src.main", "models"], "Inventaire final des mod√®les", log_file)
            
            # === PHASE 12: ARR√äT DU SCHEDULER ===
            print("üõë Phase 12: Arr√™t du scheduler...")
            
            run_cli_command(["src.main", "arreter"], "Arr√™t du scheduler", log_file)
            
            # Attente de l'arr√™t complet
            wait_and_log(10, "Finalisation de l'arr√™t", log_file)
            
            # √âtat post-arr√™t
            run_cli_command(["src.main", "etat"], "√âtat apr√®s arr√™t", log_file)
            
        except KeyboardInterrupt:
            print("\n‚ùå Test interrompu par l'utilisateur")
            log_file.write("\n\n=== TEST INTERROMPU PAR L'UTILISATEUR ===\n")
            # Tentative d'arr√™t du scheduler
            try:
                run_cli_command(["src.main", "arreter"], "Arr√™t d'urgence du scheduler", log_file)
            except:
                pass
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")
            log_file.write(f"\n\n=== ERREUR INATTENDUE ===\n{e}\n")
            # Tentative d'arr√™t du scheduler
            try:
                run_cli_command(["src.main", "arreter"], "Arr√™t d'urgence du scheduler", log_file)
            except:
                pass
        finally:
            # Pied de page
            end_time = datetime.now(timezone.utc)
            duration = end_time - start_time
            log_file.write(f"\n\n=== FIN DU TEST ===\n")
            log_file.write(f"Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
            log_file.write(f"Dur√©e totale: {duration}\n")
            log_file.write("=" * 70 + "\n")
    
    print(f"\n‚úÖ Test de fum√©e 45 minutes termin√©")
    print(f"üìù Rapport complet: {log_path}")


if __name__ == "__main__":
    main()
