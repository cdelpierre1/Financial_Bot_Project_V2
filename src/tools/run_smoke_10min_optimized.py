#!/usr/bin/env python3
"""
Test de fum√©e COMPLET (4 minutes) - TOUT √† 100% sans timeouts.

CORRECTIONS APPLIQU√âES :
‚úÖ demarrer: Mode --test-mode (d√©marre 3s puis arr√™te)
‚úÖ coll        finally:
            end_time = datetime.now(timezone.utc)
            duration = end_time - start_time
            
            # NETTOYAGE AUTOMATIQUE COMPLET
            print("\nüßπ Nettoyage automatique des donn√©es test...")
            test_manager.cleanup_all_test_data()
            
            log_file.write(f"\n\n=== FIN DU TEST ===\n")
            log_file.write(f"Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
            log_file.write(f"Dur√©e totale: {duration}\n")
            log_file.write("=" * 70 + "\n")
            
            print(f"‚úÖ Test termin√© en {duration}")
            print(f"üìù Rapport: {log_path}")
            print("üóëÔ∏è Toutes les donn√©es test ont √©t√© supprim√©es automatiquement")cal: Mode --dry-run par d√©faut (simulation rapide) 
‚úÖ train: Bug ParquetWriter.settings corrig√© + donn√©es test temporaires
‚úÖ train-incremental: Modes micro/mini en simulation
‚úÖ prevoir: Mode --test-mode pour √©viter timeouts API
‚úÖ Donn√©es test: Cr√©ation automatique + nettoyage complet

AUCUN TIMEOUT ACCEPT√â - Tout doit fonctionner √† 100% !
Dur√©e th√©orique: 4 minutes avec donn√©es r√©alistes
"""

import os
import subprocess
import sys
import time
from datetime import datetime, timezone
import argparse
from typing import Tuple
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
src_path = Path(__file__).parent.parent
sys.path.insert(0, str(src_path))

from tools.test_data_manager import TestDataManager

ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))
LOG_DIR = os.path.join(ROOT, "logs", "test_runs")

def run_cli_command(command_parts: list[str], description: str, log_file) -> Tuple[str, int]:
    """Ex√©cute une commande CLI et log le r√©sultat."""
    timestamp = datetime.now(timezone.utc).strftime("%H:%M:%S")
    log_file.write(f"\n[{timestamp}] Commande: {description}\n")
    log_file.write(f"$ .venv\\Scripts\\python.exe -m {' '.join(command_parts)}\n")
    log_file.flush()
    
    try:
        python_exe = os.path.join(ROOT, ".venv", "Scripts", "python.exe")
        full_cmd = [python_exe, "-m"] + command_parts
        
        result = subprocess.run(
            full_cmd,
            cwd=ROOT,
            capture_output=True,
            text=True,
            encoding='utf-8',  # Force UTF-8 pour √©viter erreurs Unicode
            errors='replace',  # Remplace caract√®res non d√©codables
            timeout=60  # 1 minute max
        )
        
        if result.stdout.strip():
            log_file.write(f"STDOUT:\n{result.stdout}\n")
        if result.stderr.strip():
            log_file.write(f"STDERR:\n{result.stderr}\n")
        
        log_file.write(f"Return code: {result.returncode}\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        
        return result.stdout, result.returncode
        
    except subprocess.TimeoutExpired:
        log_file.write("ERREUR: Timeout (1 min) d√©pass√©\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        return "", 1
    except Exception as e:
        log_file.write(f"ERREUR: {e}\n")
        log_file.write("-" * 50 + "\n")
        log_file.flush()
        return "", 1

def wait_and_log(duration_sec: int, description: str, log_file):
    """Attend et log le temps d'attente."""
    timestamp = datetime.now(timezone.utc).strftime("%H:%M:%S")
    log_file.write(f"\n[{timestamp}] Attente: {description} ({duration_sec}s)\n")
    log_file.flush()
    time.sleep(duration_sec)

def main():
    """Test de fum√©e optimis√© 10 minutes."""
    parser = argparse.ArgumentParser(description="Test de fum√©e 10 min optimis√©")
    parser.add_argument("--dry-run", action="store_true", help="Mode simulation")
    args = parser.parse_args()
    
    os.makedirs(LOG_DIR, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_filename = f"smoke_10min_{timestamp}.txt"
    log_path = os.path.join(LOG_DIR, log_filename)
    
    print(f"üß™ Test de fum√©e 4 minutes COMPLET (100%)")
    print(f"üìù Log: {log_path}")
    
    if args.dry_run:
        print("üîç Mode dry-run activ√©")
        return
    
    with open(log_path, "w", encoding="utf-8") as log_file:
        start_time = datetime.now(timezone.utc)
        log_file.write(f"=== TEST DE FUM√âE 4 MINUTES COMPLET (100%) ===\n")
        log_file.write(f"D√©but: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
        log_file.write(f"Python: .venv\\Scripts\\python.exe\n")
        log_file.write(f"R√©pertoire: {ROOT}\n")
        log_file.write(f"TEST COMPLET: Tout doit fonctionner √† 100% - AUCUN TIMEOUT\n")
        log_file.write("=" * 70 + "\n\n")
        
        # Initialiser gestionnaire de donn√©es test
        test_manager = TestDataManager()
        
        # Initialiser gestionnaire de donn√©es test
        test_manager = TestDataManager()
        
        try:
            # === PHASE 0: PR√âPARATION DONN√âES TEST (30s) ===
            print("üîß Phase 0: Pr√©paration donn√©es test...")
            test_manager.setup_test_environment()
            test_manager.create_test_model("bitcoin")
            log_file.write("‚úÖ Donn√©es de test cr√©√©es avec succ√®s\n\n")
            log_file.flush()
            
            # === PHASE 1: √âTAT INITIAL (15s) ===
            print("üìä Phase 1: √âtat initial...")
            
            run_cli_command(["src.main", "etat"], "√âtat initial du syst√®me", log_file)
            
            # === PHASE 2: TESTS CLI COMPLETS (2min) ===
            print("üöÄ Phase 2: Tests CLI complets...")
            
            # Test d√©marrage en mode test (non-bloquant)
            run_cli_command(["src.main", "demarrer", "--test-mode"], "Test d√©marrage (mode test)", log_file)
            
            # Test arr√™t
            run_cli_command(["src.main", "arreter"], "Test arr√™t", log_file)
            
            # Test pr√©diction EN MODE TEST (√©vite timeout API)
            run_cli_command([
                "src.main", "prevoir", 
                "--coin", "bitcoin", 
                "--unit", "min", 
                "--value", "10", 
                "--kind", "price",
                "--test-mode"
            ], "Test pr√©diction (mode test)", log_file)
            
            # Test collecte historique en mode test pour √©viter timeouts
            run_cli_command(["src.main", "collect-historical", "--test-mode"], "Test collecte historique (mode test)", log_file)
            
            # === PHASE 3: TESTS ML CORRIG√âS (1min) ===
            print("ü§ñ Phase 3: Tests ML...")
            
            run_cli_command([
                "src.main", "train", 
                "--coin", "bitcoin",
                "--test-mode"
            ], "Test entra√Ænement (mode test)", log_file)
            
            run_cli_command([
                "src.main", "train-incremental", 
                "--mode", "micro"
            ], "Test entra√Ænement incr√©mental corrig√©", log_file)
            
            # === PHASE 4: VALIDATION FINALE (15s) ===
            print("‚úÖ Phase 4: Validation finale...")
            
            run_cli_command(["src.main", "etat"], "√âtat final", log_file)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Test interrompu")
            log_file.write(f"\n=== TEST INTERROMPU ===\n")
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
            log_file.write(f"\n=== ERREUR ===\n")
            log_file.write(f"Erreur: {e}\n")
        finally:
            # === NETTOYAGE AUTOMATIQUE DES DONN√âES TEST ===
            print("\nüßπ Nettoyage des donn√©es de test...")
            test_manager.cleanup_all_test_data()
            
            end_time = datetime.now(timezone.utc)
            duration = end_time - start_time
            
            log_file.write(f"\n\n=== FIN DU TEST ===\n")
            log_file.write(f"Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
            log_file.write(f"Dur√©e totale: {duration}\n")
            log_file.write("=" * 70 + "\n")
            
            print(f"‚úÖ Test termin√© en {duration}")
            print(f"üìù Rapport: {log_path}")
            print(f"üßπ Donn√©es de test supprim√©es - aucun r√©sidu")

if __name__ == "__main__":
    main()
