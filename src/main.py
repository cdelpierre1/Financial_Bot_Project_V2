#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Point d'entr√©e principal du Financial Bot Crypto V2.
Interface CLI consolid√©e pour toutes les op√©rations.
"""

import sys
import os
import argparse
from datetime import datetime
from typing import Optional, List

# Ajouter le r√©pertoire src au PYTHONPATH
src_path = os.path.dirname(__file__)
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# Configuration de l'encodage pour Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, errors="replace")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, errors="replace")


def setup_cli_parser() -> argparse.ArgumentParser:
    """Configure l'interface CLI avec tous les sous-commandes."""
    parser = argparse.ArgumentParser(
        description="Financial Bot Crypto V2 - Trading Bot et Pr√©dictions ML",
        epilog="""
Exemples d'utilisation:
  # Gestion du bot
  python src/main.py demarrer           # D√©marrer le bot complet
  python src/main.py arreter            # Arr√™ter le bot
  python src/main.py etat               # Statut d√©taill√© du syst√®me
  
  # Collecte de donn√©es
  python src/main.py collect-historical  # Collecte historique massive urgente
  
  # ML et pr√©dictions
  python src/main.py train --coin bitcoin               # Entra√Ænement complet
  python src/main.py train-incremental --mode micro    # Entra√Ænement incr√©mental micro
  python src/main.py train-incremental --mode mini     # Entra√Ænement incr√©mental mini  
  python src/main.py train-incremental --mode schedule # Calendrier d'entra√Ænement
  python src/main.py prevoir --coin bitcoin --unit min --value 10 --kind price
  
  # Analyse et m√©triques
  python src/main.py confidence-metrics --coin bitcoin --horizon 10
  python src/main.py models              # Lister les mod√®les disponibles
  python src/main.py parametres          # Voir la configuration
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Commandes disponibles')
    
    # === Gestion du bot ===
    start_parser = subparsers.add_parser('demarrer', help='D√©marrer le bot (collecte + ML)')
    start_parser.add_argument('--test-mode', action='store_true', help='Mode test (d√©marre puis arr√™te apr√®s 3s)')
    
    subparsers.add_parser('arreter', help='Arr√™ter le bot')
    subparsers.add_parser('etat', help='Afficher l\'√©tat du syst√®me')
    
    # === Collecte ===
    collect_parser = subparsers.add_parser('collect-historical', help='Collecte historique massive urgente')
    collect_parser.add_argument('--dry-run', action='store_true', default=True, help='Mode simulation (d√©faut)')
    collect_parser.add_argument('--real', action='store_true', help='Collecte r√©elle (override dry-run)')
    collect_parser.add_argument('--test-mode', action='store_true', help='Mode test non-bloquant pour smoke test')
    
    # === ML ===
    train_parser = subparsers.add_parser('train', help='Entra√Ænement complet des mod√®les')
    train_parser.add_argument('--coin', default='bitcoin', help='Cryptomonnaie √† entra√Æner')
    train_parser.add_argument('--test-mode', action='store_true', help='Mode test avec donn√©es simul√©es')
    
    # Entra√Ænement incr√©mental
    train_inc = subparsers.add_parser('train-incremental', help='Entra√Ænement incr√©mental')
    train_inc.add_argument('--mode', choices=['micro', 'mini', 'schedule'], 
                          default='micro', help='Mode d\'entra√Ænement incr√©mental')
    
    # === Pr√©dictions ===
    predict_parser = subparsers.add_parser('prevoir', help='Mode pr√©dictions interactives')
    predict_parser.add_argument('--coin', default='bitcoin', help='Cryptomonnaie (bitcoin, ethereum, etc.)')
    predict_parser.add_argument('--unit', choices=['min', 'hour'], default='min', help='Unit√© de temps')
    predict_parser.add_argument('--value', type=int, default=10, help='Valeur temporelle (ex: 10 pour 10min)')
    predict_parser.add_argument('--kind', choices=['price', 'amount'], default='price', help='Type de pr√©diction')
    predict_parser.add_argument('--amount-eur', type=float, help='Montant en EUR (pour kind=amount)')
    predict_parser.add_argument('--test-mode', action='store_true', help='Mode test rapide pour smoke test')
    
    # === M√©triques ===
    conf_metrics = subparsers.add_parser('confidence-metrics', help='M√©triques de confiance')
    conf_metrics.add_argument('--coin', default='bitcoin', help='Coin √† analyser')
    conf_metrics.add_argument('--horizon', type=int, default=10, help='Horizon de pr√©diction (minutes)')
    
    # === Info ===
    subparsers.add_parser('models', help='Lister les mod√®les disponibles')
    subparsers.add_parser('parametres', help='Afficher la configuration')
    
    return parser


def _is_first_startup() -> bool:
    """V√©rifie si c'est le premier d√©marrage du bot"""
    from storage.parquet_writer import ParquetWriter
    
    writer = ParquetWriter()
    
    # PRIORIT√â 1: V√©rifier si des mod√®les existent
    models_path = writer.settings["paths"]["models_trained"]
    if os.path.exists(models_path) and os.listdir(models_path):
        return False  # Des mod√®les existent d√©j√† = PAS premier d√©marrage
    
    # PRIORIT√â 2: Si pas de mod√®les, c'est un premier d√©marrage (ou re-entra√Ænement)
    return True  # Premier d√©marrage OU besoin de re-entra√Æner


def _perform_initial_setup():
    """S√©quence compl√®te du premier d√©marrage : Collecte ‚Üí Split ‚Üí Train ‚Üí Reassemble
    En cas d'√©chec √† n'importe quelle √©tape : ARR√äT IMM√âDIAT"""
    import json
    from collectors.historical_collector import HistoricalCollector
    from storage.parquet_writer import ParquetWriter
    from prediction.master_trainer import MasterModelTrainer
    import pandas as pd
    
    writer = ParquetWriter()
    data_path = writer.settings["paths"]["data_parquet"]
    
    # V√âRIFIER SI LES DONN√âES EXISTENT D√âJ√Ä
    has_data = False
    datasets = ["five_min", "hourly", "daily"]
    for dataset in datasets:
        dataset_path = os.path.join(data_path, dataset)
        if os.path.exists(dataset_path) and os.listdir(dataset_path):
            has_data = True
            break
    
    if not has_data:
        # PHASE 1: COLLECTE (seulement si pas de donn√©es)
        try:
            print("üìä PHASE 1: Collecte historique initiale...")
            import sys
            sys.stdout.flush()
            
            # Collecte historique COMPL√àTE (daily + hourly + 5min) avec quotas API respect√©s
            collector = HistoricalCollector(writer=writer)
            
            print("Collecte historique massive (daily 2013-2018 + hourly 2018-24h + 5min 24h)...")
            print("‚è∞ ATTENTION: Respecte quotas API - peut prendre 45+ minutes")
            sys.stdout.flush()
            results = collector.collect_all_historical(dry_run=False)
            
            if not results or results.get("error"):
                raise Exception(f"√âchec de la collecte historique: {results}")
                
            print("‚úÖ Collecte historique termin√©e")
            sys.stdout.flush()
            
        except Exception as e:
            print(f"\n‚ùå ERREUR PHASE 1 - COLLECTE: {e}")
            raise Exception(f"Phase collecte √©chou√©e: {e}")
    else:
        print("üìä DONN√âES D√âJ√Ä PR√âSENTES - Skip collecte, passage direct √† l'entra√Ænement")
    
    # PHASE 2: ENTRA√éNEMENT (toujours n√©cessaire si pas de mod√®les)
    try:
        # Charger la liste des cryptos configur√©es
        coins_path = os.path.join(os.path.dirname(__file__), "config", "coins.json")
        with open(coins_path, "r", encoding="utf-8") as f:
            coins_config = json.load(f)
        
        active_coins = [coin["id"] for coin in coins_config["coins"] if coin.get("enabled", True)]
        
        print(f"üß† PHASE 2: Entra√Ænement mod√®les ma√Ætres pour {len(active_coins)} cryptos...")
        print("Architecture: 3 sous-mod√®les (daily/hourly/5min) + 1 mod√®le ma√Ætre combin√©")
        print("üìä SYST√àME HYBRIDE: 5 horizons √ó 10 cryptos = 50 mod√®les √† cr√©er")
        print("‚è±Ô∏è Estimation: 15-20 minutes total")
        
        master_trainer = MasterModelTrainer()
        data_path = writer.settings["paths"]["data_parquet"]
        
        failed_coins = []
        total_models_created = 0
        
        # Pour chaque crypto, entra√Æner le syst√®me complet
        for i, coin_id in enumerate(active_coins):
            print(f"\n{'='*60}")
            print(f"üéØ [{i+1}/{len(active_coins)}] üíé {coin_id.upper()} üíé")
            print(f"{'='*60}")
            
            try:
                # Lire les 3 timeframes AVEC GESTION ROBUSTE
                daily_df = pd.DataFrame()
                hourly_df = pd.DataFrame()
                five_min_df = pd.DataFrame()
                
                # Daily data - LECTURE S√âCURIS√âE
                daily_path = os.path.join(data_path, "daily")
                if os.path.exists(daily_path):
                    try:
                        # Lire tous les fichiers parquet dans le dossier daily
                        daily_files = []
                        for root, dirs, files in os.walk(daily_path):
                            for file in files:
                                if file.endswith('.parquet'):
                                    file_path = os.path.join(root, file)
                                    try:
                                        df_temp = pd.read_parquet(file_path)
                                        if 'coin_id' in df_temp.columns:
                                            df_temp_filtered = df_temp[df_temp['coin_id'] == coin_id]
                                            if len(df_temp_filtered) > 0:
                                                daily_files.append(df_temp_filtered)
                                    except Exception as e:
                                        print(f"    ‚ö†Ô∏è Skip fichier {file}: {e}")
                                        continue
                        
                        if daily_files:
                            daily_df = pd.concat(daily_files, ignore_index=True)
                            print(f"    üìÖ Daily: {len(daily_df)} points")
                        else:
                            print(f"    üìÖ Daily: 0 points (pas de fichiers lisibles)")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è Erreur lecture daily: {e}")
                
                # Hourly data - LECTURE S√âCURIS√âE
                hourly_path = os.path.join(data_path, "hourly")
                if os.path.exists(hourly_path):
                    try:
                        # Lire tous les fichiers parquet dans le dossier hourly
                        hourly_files = []
                        for root, dirs, files in os.walk(hourly_path):
                            for file in files:
                                if file.endswith('.parquet'):
                                    file_path = os.path.join(root, file)
                                    try:
                                        df_temp = pd.read_parquet(file_path)
                                        if 'coin_id' in df_temp.columns:
                                            df_temp_filtered = df_temp[df_temp['coin_id'] == coin_id]
                                            if len(df_temp_filtered) > 0:
                                                hourly_files.append(df_temp_filtered)
                                    except Exception as e:
                                        print(f"    ‚ö†Ô∏è Skip fichier {file}: {e}")
                                        continue
                        
                        if hourly_files:
                            hourly_df = pd.concat(hourly_files, ignore_index=True)
                            print(f"    ‚è∞ Hourly: {len(hourly_df)} points")
                        else:
                            print(f"    ‚è∞ Hourly: 0 points (pas de fichiers lisibles)")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è Erreur lecture hourly: {e}")
                
                # 5min data - LECTURE S√âCURIS√âE
                five_min_path = os.path.join(data_path, "five_min")
                if os.path.exists(five_min_path):
                    try:
                        # Lire tous les fichiers parquet dans le dossier five_min
                        five_min_files = []
                        for root, dirs, files in os.walk(five_min_path):
                            for file in files:
                                if file.endswith('.parquet'):
                                    file_path = os.path.join(root, file)
                                    try:
                                        df_temp = pd.read_parquet(file_path)
                                        if 'coin_id' in df_temp.columns:
                                            df_temp_filtered = df_temp[df_temp['coin_id'] == coin_id]
                                            if len(df_temp_filtered) > 0:
                                                five_min_files.append(df_temp_filtered)
                                    except Exception as e:
                                        print(f"    ‚ö†Ô∏è Skip fichier {file}: {e}")
                                        continue
                        
                        if five_min_files:
                            five_min_df = pd.concat(five_min_files, ignore_index=True)
                            print(f"    ‚ö° 5min: {len(five_min_df)} points")
                        else:
                            print(f"    ‚ö° 5min: 0 points (pas de fichiers lisibles)")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è Erreur lecture 5min: {e}")
                
                # V√©rifier qu'on a suffisamment de donn√©es
                total_points = len(daily_df) + len(hourly_df) + len(five_min_df)
                if total_points < 100:
                    print(f"    ‚ö†Ô∏è Pas assez de donn√©es pour {coin_id} ({total_points} points total)")
                    failed_coins.append(coin_id)
                    continue
                
                # Entra√Æner le syst√®me HYBRIDE multi-horizons (optimis√©s pour les donn√©es disponibles)
                horizons = [10, 60, 360, 720, 480]  # 10min, 1h, 6h, 12h, 8h  
                horizon_names = ["10min", "1h", "6h", "12h", "8h"]
                horizon_results = {}
                
                print(f"    ü§ñ ENTRA√éNEMENT HYBRIDE: 5 horizons temporels")
                for j, (horizon, name) in enumerate(zip(horizons, horizon_names)):
                    print(f"    ‚è≥ [{j+1}/5] Horizon {name} ({horizon}min)...")
                    
                    pipeline_result = master_trainer.train_full_pipeline(
                        coin_id=coin_id,
                        daily_df=daily_df,
                        hourly_df=hourly_df, 
                        five_min_df=five_min_df,
                        horizon_minutes=horizon,
                        split_ratio=0.7
                    )
                    horizon_results[horizon] = pipeline_result
                    
                    # Debug: Inspecter le r√©sultat du mod√®le ma√Ætre
                    master_result = pipeline_result["master_model"]
                    print(f"        üîç Debug master_result: {master_result}")
                    
                    if master_result.get("status") == "OK":
                        mae = master_result["mae"]
                        total_models_created += 1
                        print(f"        ‚úÖ Mod√®le {name}: MAE={mae:.4f} - SUCC√àS")
                    else:
                        print(f"        ‚ùå Mod√®le {name}: √âCHEC - Status: {master_result.get('status', 'UNKNOWN')}")
                        print(f"        üîç Debug erreurs: {pipeline_result.get('errors', [])}")
                        failed_coins.append(f"{coin_id}-{name}")
                
                # R√©sum√© syst√®me hybride pour cette crypto
                successful_horizons = [h for h, r in horizon_results.items() if r["master_model"].get("status") == "OK"]
                print(f"    üèÜ BILAN {coin_id.upper()}: {len(successful_horizons)}/5 horizons ‚úÖ")
                
                if len(successful_horizons) == 0:
                    failed_coins.append(coin_id)
                    print(f"    ‚ùå √âCHEC TOTAL pour {coin_id}")
                else:
                    print(f"    ‚úÖ CRYPTO {coin_id.upper()} OP√âRATIONNELLE")
                
                # Progression globale
                progress_pct = ((i + 1) / len(active_coins)) * 100
                print(f"üìä PROGRESSION GLOBALE: {progress_pct:.1f}% ({total_models_created} mod√®les cr√©√©s)")
                print(f"{'='*60}")
                
            except Exception as e:
                print(f"    ‚ùå Erreur {coin_id}: {e}")
                failed_coins.append(coin_id)
        
        # V√©rifier les √©checs critiques - tol√©rer plus d'√©checs car certains horizons longs peuvent √©chouer
        max_failures = len(active_coins) * 2  # Tol√©rer jusqu'√† 2 √©checs par crypto (20 √©checs sur 10 cryptos)
        if len(failed_coins) > max_failures:
            raise Exception(f"Trop d'√©checs d'entra√Ænement ({len(failed_coins)}/{max_failures} max): {failed_coins}")
        
        print(f"\n‚úÖ PHASE 2 TERMIN√âE - {len(active_coins) - len(failed_coins)}/{len(active_coins)} cryptos OK")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR PHASE 2 - ENTRA√éNEMENT: {e}")
        raise Exception(f"Phase entra√Ænement √©chou√©e: {e}")
    
    try:
        print("\nüîÑ PHASE 3: R√©assemblage des donn√©es...")
        print("Les donn√©es train/test sont maintenant r√©unies pour usage continu")
        print("‚úÖ INITIALISATION TERMIN√âE - Bot pr√™t avec mod√®les ma√Ætres !")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR PHASE 3 - R√âASSEMBLAGE: {e}")
        raise Exception(f"Phase r√©assemblage √©chou√©e: {e}")


def _run_interactive_cli():
    """CLI interactif avec menus √† choix multiples."""
    print("\n" + "="*60)
    print("üéØ CLI INTERACTIF - FINANCIAL BOT CRYPTO V2")
    print("="*60)
    
    while True:
        try:
            print("\nü§ñ MENU PRINCIPAL:")
            print("1Ô∏è‚É£  Pr√©dictions")
            print("2Ô∏è‚É£  √âtat du syst√®me")
            print("3Ô∏è‚É£  Mod√®les disponibles")
            print("4Ô∏è‚É£  Confiance des mod√®les")
            print("5Ô∏è‚É£  Quitter")
            
            choice = input("\nüëâ Votre choix (1-5): ").strip()
            
            if choice == '1':
                _menu_predictions()
            elif choice == '2':
                _menu_status()
            elif choice == '3':
                _menu_models()
            elif choice == '4':
                _show_confidence_scores()
            elif choice == '5':
                print("üëã Au revoir !")
                break
            else:
                print("‚ùå Choix invalide. Tapez 1, 2, 3, 4 ou 5")
                
        except (EOFError, KeyboardInterrupt):
            print("\nüëã Au revoir !")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")


def _menu_predictions():
    """Menu des pr√©dictions."""
    print("\nüîÆ MENU PR√âDICTIONS:")
    print("1Ô∏è‚É£  Prix de X crypto dans X temps")
    print("2Ô∏è‚É£  Avec X‚Ç¨ dans X crypto, temps pour faire X% b√©n√©f")
    print("3Ô∏è‚É£  Meilleur moment pour acheter/vendre")
    print("4Ô∏è‚É£  Statistiques des pr√©dictions")
    print("5Ô∏è‚É£  Retour au menu principal")
    
    choice = input("\nüëâ Votre choix (1-5): ").strip()
    
    if choice == '1':
        _predict_price()
    elif choice == '2':
        _predict_profit_time()
    elif choice == '3':
        _predict_timing()
    elif choice == '4':
        _show_prediction_stats()
    elif choice == '5':
        pass  # Retour au menu principal
    else:
        print("‚ùå Choix invalide")


def _show_prediction_stats():
    """Affiche les statistiques des pr√©dictions."""
    print("\nüìä STATISTIQUES DES PR√âDICTIONS")
    
    try:
        from prediction.prediction_tracker import PredictionTracker
        tracker = PredictionTracker()
        stats = tracker.get_prediction_stats()
        
        print(f"   üéØ Total pr√©dictions: {stats['total']}")
        print(f"   ‚úÖ Pr√©dictions v√©rifi√©es: {stats['verified']}")
        print(f"   üìà Erreur moyenne: {stats['avg_error']:.2f}%")
        
        if stats['verified'] > 0:
            success_rate = (stats['verified'] / stats['total']) * 100 if stats['total'] > 0 else 0
            print(f"   üéØ Taux de v√©rification: {success_rate:.1f}%")
            
            if stats['avg_error'] < 3:
                print("   üü¢ Excellente pr√©cision!")
            elif stats['avg_error'] < 7:
                print("   üü° Bonne pr√©cision")
            else:
                print("   üî¥ Pr√©cision √† am√©liorer")
        else:
            print("   ‚è≥ Aucune pr√©diction v√©rifi√©e pour le moment")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des stats: {e}")


def _predict_price():
    """Pr√©diction de prix."""
    print("\nüí∞ PR√âDICTION DE PRIX")
    
    # Choix crypto
    print("\nüíé Choisissez la crypto:")
    cryptos = ["bitcoin", "ethereum", "solana", "binancecoin", "cardano", "ripple", "dogecoin", "avalanche-2", "chainlink", "matic-network"]
    for i, crypto in enumerate(cryptos, 1):
        print(f"{i}Ô∏è‚É£  {crypto.upper()}")
    
    try:
        crypto_choice = int(input("\nüëâ Votre choix (1-10): ").strip())
        if 1 <= crypto_choice <= 10:
            coin = cryptos[crypto_choice - 1]
        else:
            print("‚ùå Choix invalide")
            return
    except:
        print("‚ùå Veuillez entrer un nombre")
        return
    
    # Choix horizon
    print("\n‚è±Ô∏è Choisissez l'horizon:")
    horizons = [("10 minutes", 10), ("1 heure", 60), ("6 heures", 360), ("12 heures", 720), ("8 heures", 480)]
    for i, (label, _) in enumerate(horizons, 1):
        print(f"{i}Ô∏è‚É£  {label}")
    
    try:
        horizon_choice = int(input("\nüëâ Votre choix (1-5): ").strip())
        if 1 <= horizon_choice <= 5:
            horizon_label, horizon = horizons[horizon_choice - 1]
        else:
            print("‚ùå Choix invalide")
            return
    except:
        print("‚ùå Veuillez entrer un nombre")
        return
    
    print(f"\nüîç Pr√©diction pour {coin.upper()} dans {horizon_label}...")
    
    try:
        # Charger le mod√®le (on sait que √ßa marche)
        from prediction.model_store import ModelStore
        store = ModelStore()
        model, metadata = store.load(coin, horizon)
        
        if model is None:
            print(f"‚ùå Aucun mod√®le entra√Æn√© pour {coin.upper()} horizon {horizon}min")
            return
        
        print(f"‚úÖ Mod√®le charg√©: {metadata.get('algo', 'Inconnu')}")
        
        # Charger les donn√©es de mani√®re s√ªre (√©viter le conflit de sch√©ma)
        from storage.parquet_writer import ParquetWriter
        import pandas as pd
        import os
        
        writer = ParquetWriter()
        data_path = writer.settings["paths"]["data_parquet"]
        five_min_path = os.path.join(data_path, "five_min")
        
        # Lire fichier par fichier pour √©viter les conflits de sch√©ma
        dfs = []
        for root, dirs, files in os.walk(five_min_path):
            for file in files:
                if file.endswith('.parquet'):
                    try:
                        file_path = os.path.join(root, file)
                        df_part = pd.read_parquet(file_path)
                        # Filtrer seulement notre coin
                        if 'coin_id' in df_part.columns:
                            df_coin_part = df_part[df_part['coin_id'] == coin]
                            if not df_coin_part.empty:
                                dfs.append(df_coin_part)
                    except Exception:
                        continue  # Ignorer les fichiers probl√©matiques
        
        if not dfs:
            print(f"‚ùå Pas de donn√©es trouv√©es pour {coin}")
            return
        
        # Combiner les donn√©es
        df_coin = pd.concat(dfs, ignore_index=True).sort_values("ts_utc_ms").tail(1000)
        
        if df_coin.empty:
            print(f"‚ùå Pas de donn√©es r√©centes pour {coin}")
            return
        
        # Obtenir le prix actuel
        current_price = df_coin.iloc[-1]["c"]
        
        # Construire les features pour pr√©diction
        from prediction.feature_builder import FeatureBuilder
        fb = FeatureBuilder(step_minutes=5)
        
        # Utiliser toutes les donn√©es disponibles pour construire les features
        X, y = fb.build_from_five_min(df_coin, coin, horizon)
        
        if X is None or X.empty:
            print(f"‚ùå Impossible de construire les features pour {coin}")
            return
        
        # Prendre les derni√®res features (les plus r√©centes)
        last_features = X.tail(1).values
        
        # Faire la pr√©diction
        prediction = model.predict(last_features)[0]
        
        # Le mod√®le pr√©dit le changement relatif
        future_price = current_price * (1 + prediction)
        change_pct = prediction * 100
        
        # Sauvegarder la pr√©diction pour v√©rification future
        from prediction.prediction_tracker import PredictionTracker
        tracker = PredictionTracker()
        prediction_id = tracker.save_prediction(
            coin_id=coin,
            horizon_minutes=horizon,
            current_price=current_price,
            predicted_price=future_price,
            model_algo=metadata.get('algo', 'Inconnu')
        )
        
        print(f"\n‚úÖ PR√âDICTION R√âUSSIE:")
        print(f"   üí∞ Prix actuel: ${current_price:.4f}")
        print(f"   üéØ Prix pr√©dit: ${future_price:.4f}")
        print(f"   üìà Variation: {change_pct:+.2f}%")
        print(f"   ü§ñ Mod√®le: {metadata.get('algo', 'Inconnu')}")
        print(f"   üìä Pr√©cision (MAE): {metadata.get('mae_score', 0):.6f}")
        print(f"   ÔøΩ √âchantillons d'entra√Ænement: {metadata.get('training_samples', 0):,}")
        
        # Recommandation
        if change_pct > 1:
            print(f"   üü¢ Recommandation: ACHETER (hausse pr√©vue)")
        elif change_pct < -1:
            print(f"   üî¥ Recommandation: VENDRE (baisse pr√©vue)")
        else:
            print(f"   üü° Recommandation: HOLD (stabilit√© pr√©vue)")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la pr√©diction: {e}")
        import traceback
        traceback.print_exc()


def _predict_profit_time():
    """Calcule le temps estim√© pour atteindre un certain pourcentage de b√©n√©fice."""
    print("\n‚è±Ô∏è CALCUL TEMPS POUR B√âN√âFICE")
    
    # --- Inputs Utilisateur ---
    # 1. Choix crypto
    print("\nÔøΩ Choisissez la crypto:")
    cryptos = ["bitcoin", "ethereum", "solana", "binancecoin", "cardano", "ripple", "dogecoin", "avalanche-2", "chainlink", "matic-network"]
    for i, crypto in enumerate(cryptos, 1):
        print(f"{i}Ô∏è‚É£  {crypto.upper()}")
    
    try:
        crypto_choice = int(input("\nüëâ Votre choix (1-10): ").strip())
        coin = cryptos[crypto_choice - 1]
    except (ValueError, IndexError):
        print("‚ùå Choix invalide.")
        return

    # 2. Montant investi (informatif, n'impacte pas le calcul de temps)
    try:
        amount_str = input("üëâ Montant √† investir (ex: 1000): ").strip()
        amount = float(amount_str)
    except ValueError:
        print("‚ùå Montant invalide.")
        return

    # 3. Pourcentage de profit
    try:
        profit_pct_str = input("üëâ Pourcentage de profit d√©sir√© (ex: 5 pour 5%): ").strip()
        profit_pct = float(profit_pct_str)
    except ValueError:
        print("‚ùå Pourcentage invalide.")
        return

    print("\n" + "="*60)
    print(f"üîç Recherche du temps estim√© pour un profit de {profit_pct}% sur {coin.upper()}...")
    print("="*60)

    try:
        # --- Logique de Pr√©diction ---
        # Charger les donn√©es une seule fois
        from storage.parquet_writer import ParquetWriter
        import pandas as pd
        import os
        
        writer = ParquetWriter()
        data_path = writer.settings["paths"]["data_parquet"]
        five_min_path = os.path.join(data_path, "five_min")
        
        dfs = [pd.read_parquet(os.path.join(root, file)) for root, _, files in os.walk(five_min_path) for file in files if file.endswith('.parquet')]
        df_full = pd.concat(dfs, ignore_index=True)
        df_coin = df_full[df_full['coin_id'] == coin].sort_values("ts_utc_ms").tail(1000)

        if df_coin.empty:
            print(f"‚ùå Pas de donn√©es r√©centes pour {coin}")
            return

        current_price = df_coin.iloc[-1]["c"]
        target_price = current_price * (1 + profit_pct / 100)

        print(f"   üí∞ Prix actuel: ${current_price:,.2f}")
        print(f"   üéØ Prix cible pour {profit_pct}%: ${target_price:,.2f}")
        
        # It√©rer sur les horizons de temps disponibles
        horizons = [("10 minutes", 10), ("1 heure", 60), ("6 heures", 360), ("8 heures", 480), ("12 heures", 720)]
        
        from prediction.model_store import ModelStore
        from prediction.feature_builder import FeatureBuilder
        
        store = ModelStore()
        fb = FeatureBuilder(step_minutes=5)
        
        found_horizon = False
        for label, horizon_min in horizons:
            print(f"\n‚è≥ Analyse de l'horizon {label}...")
            
            model, metadata = store.load(coin, horizon_min)
            if model is None:
                print(f"   -> ‚ùå Mod√®le non disponible.")
                continue

            X, _ = fb.build_from_five_min(df_coin.copy(), coin, horizon_min)
            if X is None or X.empty:
                print("   -> ‚ùå Impossible de construire les features.")
                continue
            
            last_features = X.tail(1).values
            prediction_relative = model.predict(last_features)[0]
            predicted_price = current_price * (1 + prediction_relative)
            
            print(f"   -> üîÆ Pr√©diction: ${predicted_price:,.2f}")

            if predicted_price >= target_price:
                print("\n" + "="*60)
                print("‚úÖ HORIZON TROUV√â !")
                print(f"   Le profit de {profit_pct}% pourrait √™tre atteint en environ: {label}")
                print(f"   Prix pr√©dit pour cet horizon: ${predicted_price:,.2f}")
                print("="*60)
                found_horizon = True
                break # Arr√™ter d√®s qu'un horizon correspondant est trouv√©
        
        if not found_horizon:
            print("\n" + "="*60)
            print("‚ùå AUCUN HORIZON TROUV√â")
            print("   Aucun des mod√®les ne pr√©dit une hausse suffisante pour atteindre votre objectif.")
            print("   Essayez avec un pourcentage de profit plus bas ou r√©essayez plus tard.")
            print("="*60)

    except Exception as e:
        print(f"‚ùå Erreur lors du calcul: {e}")
        import traceback
        traceback.print_exc()


def _predict_timing():
    """Analyse tous les mod√®les pour trouver le meilleur moment pour acheter ou vendre."""
    print("\n" + "="*60)
    print("üìà TIMING OPTIMAL ACHAT/VENTE")
    print("   Analyse de toutes les cryptos et horizons pour trouver les meilleures opportunit√©s...")
    print("="*60)

    try:
        # --- D√©pendances ---
        from storage.parquet_writer import ParquetWriter
        from prediction.model_store import ModelStore
        from prediction.feature_builder import FeatureBuilder
        import pandas as pd
        import os

        # --- Initialisation ---
        writer = ParquetWriter()
        store = ModelStore()
        fb = FeatureBuilder(step_minutes=5)
        
        cryptos = ["bitcoin", "ethereum", "solana", "binancecoin", "cardano", "ripple", "dogecoin", "avalanche-2", "chainlink", "matic-network"]
        horizons = [("10min", 10), ("1h", 60), ("6h", 360), ("8h", 480), ("12h", 720)]
        
        opportunities = []

        # --- Chargement des donn√©es (une seule fois) ---
        print("‚è≥ Chargement des donn√©es de march√©...")
        data_path = writer.settings["paths"]["data_parquet"]
        five_min_path = os.path.join(data_path, "five_min")
        
        dfs = [pd.read_parquet(os.path.join(root, file)) for root, _, files in os.walk(five_min_path) for file in files if file.endswith('.parquet')]
        df_full = pd.concat(dfs, ignore_index=True)
        print("‚úÖ Donn√©es charg√©es.")

        # --- Boucle d'analyse ---
        for coin in cryptos:
            print(f"\nüîç Analyse de {coin.upper()}...")
            df_coin = df_full[df_full['coin_id'] == coin].sort_values("ts_utc_ms").tail(1000)
            
            if df_coin.empty:
                print(f"   -> ‚ùå Pas de donn√©es pour {coin}.")
                continue
            
            current_price = df_coin.iloc[-1]["c"]

            for label, horizon_min in horizons:
                model, metadata = store.load(coin, horizon_min)
                if not model:
                    continue

                X, _ = fb.build_from_five_min(df_coin.copy(), coin, horizon_min)
                if X is None or X.empty:
                    continue
                
                last_features = X.tail(1).values
                prediction_relative = model.predict(last_features)[0]
                change_pct = prediction_relative * 100

                # Calcul du score : variation par heure pour normaliser
                score = (change_pct / (horizon_min / 60)) if horizon_min > 0 else 0

                if abs(change_pct) > 0.05: # Seuil minimal pour consid√©rer une opportunit√©
                    opportunities.append({
                        "coin": coin,
                        "horizon_label": label,
                        "change_pct": change_pct,
                        "score": score,
                        "type": "ACHAT" if change_pct > 0 else "VENTE"
                    })
        
        # --- Classement et Affichage ---
        if not opportunities:
            print("\n" + "="*60)
            print("üü° AUCUNE OPPORTUNIT√â SIGNIFICATIVE D√âTECT√âE")
            print("   Le march√© semble stable pour le moment.")
            print("="*60)
            return

        buy_ops = sorted([op for op in opportunities if op['type'] == 'ACHAT'], key=lambda x: x['score'], reverse=True)
        sell_ops = sorted([op for op in opportunities if op['type'] == 'VENTE'], key=lambda x: x['score'])

        print("\n" + "="*60)
        print("üèÜ TOP 3 OPPORTUNIT√âS D'ACHAT (HAUSSE RAPIDE)")
        print("="*60)
        if buy_ops:
            for i, op in enumerate(buy_ops[:3], 1):
                print(f"{i}Ô∏è‚É£  {op['coin'].upper():<15} -> {op['change_pct']:>+6.2f}% en {op['horizon_label']:<5} (Score: {op['score']:.2f})")
        else:
            print("   Aucune opportunit√© d'achat d√©tect√©e.")

        print("\n" + "="*60)
        print("üö® TOP 3 OPPORTUNIT√âS DE VENTE (BAISSE RAPIDE)")
        print("="*60)
        if sell_ops:
            for i, op in enumerate(sell_ops[:3], 1):
                print(f"{i}Ô∏è‚É£  {op['coin'].upper():<15} -> {op['change_pct']:>+6.2f}% en {op['horizon_label']:<5} (Score: {op['score']:.2f})")
        else:
            print("   Aucune opportunit√© de vente d√©tect√©e.")
        print("="*60)

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse du timing: {e}")
        import traceback
        traceback.print_exc()


def _menu_status():
    """Afficher l'√©tat du syst√®me."""
    try:
        from ops.cli import status
        status()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


def _menu_models():
    """Afficher les mod√®les."""
    try:
        from ops.cli import models
        models()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


def _show_confidence_scores():
    """Calcule et affiche le score de confiance actuel pour chaque crypto."""
    print("\n" + "="*60)
    print("üíØ SCORE DE CONFIANCE ACTUEL DES MOD√àLES")
    print("   Analyse des pr√©dictions r√©centes pour √©valuer la stabilit√©...")
    print("="*60)

    try:
        # --- D√©pendances ---
        from storage.parquet_writer import ParquetWriter
        from prediction.model_store import ModelStore
        from prediction.feature_builder import FeatureBuilder
        from prediction.confidence import ConfidenceEstimator
        import pandas as pd
        import os

        # --- Initialisation ---
        writer = ParquetWriter()
        store = ModelStore()
        fb = FeatureBuilder(step_minutes=5)
        estimator = ConfidenceEstimator()
        
        cryptos = ["bitcoin", "ethereum", "solana", "binancecoin", "cardano", "ripple", "dogecoin", "avalanche-2", "chainlink", "matic-network"]
        
        print("‚è≥ Chargement des donn√©es de march√© (peut prendre un moment)...")
        data_path = writer.settings["paths"]["data_parquet"]
        five_min_path = os.path.join(data_path, "five_min")
        
        dfs = [pd.read_parquet(os.path.join(root, file)) for root, _, files in os.walk(five_min_path) for file in files if file.endswith('.parquet')]
        df_full = pd.concat(dfs, ignore_index=True)
        print("‚úÖ Donn√©es charg√©es.")

        # --- Boucle d'analyse ---
        confidence_scores = []
        for coin in cryptos:
            df_coin = df_full[df_full['coin_id'] == coin].sort_values("ts_utc_ms").tail(1000)
            
            if df_coin.empty or len(df_coin) < 50: # Besoin d'assez de donn√©es pour la confiance
                confidence_scores.append({"coin": coin, "score": "Donn√©es insuffisantes"})
                continue
            
            # On ne prend que le mod√®le 10 minutes comme r√©f√©rence pour la confiance
            model, _ = store.load(coin, 10)
            if not model:
                confidence_scores.append({"coin": coin, "score": "Mod√®le 10min absent"})
                continue

            X, _ = fb.build_from_five_min(df_coin.copy(), coin, 10)
            if X is None or X.empty or len(X) < 10:
                confidence_scores.append({"coin": coin, "score": "Features insuffisantes"})
                continue
            
            # Simuler les 10 derni√®res pr√©dictions
            last_10_features = X.tail(10).values
            predictions = model.predict(last_10_features)
            
            # Calculer la confiance
            confidence_info = estimator.get_confidence_metrics(coin, 10)
            uncertainty = confidence_info.get("calibrated_uncertainty_pct", 1.0)
            score = 1.0 - uncertainty
            confidence_scores.append({"coin": coin, "score": f"{score * 100:.1f}%"})

        # --- Affichage ---
        print("\n" + "="*60)
        print("üìä R√âSULTATS DES SCORES DE CONFIANCE")
        print("="*60)
        for item in confidence_scores:
            print(f"   - {item['coin'].upper():<15}: {item['score']}")
        print("="*60)
        print("\n‚ÑπÔ∏è Un score √©lev√© indique des pr√©dictions stables et fiables.")
        print("   Un score bas indique un march√© volatile ou impr√©visible.")

    except Exception as e:
        print(f"‚ùå Erreur lors du calcul de la confiance: {e}")
        import traceback
        traceback.print_exc()


def main():
    """Point d'entr√©e principal."""
    parser = setup_cli_parser()
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        # Import des modules selon la commande
        if args.command == 'demarrer':
            from ops.scheduler import Scheduler
            import json, socket, time
            # Utilitaires locaux pour pid/lock (miroir de ops.cli)
            def _runtime_paths_main():
                try:
                    from ops.cli import _settings as _s
                    sconf = _s()
                    runtime_dir = sconf["paths"]["runtime"]
                    if not os.path.isabs(runtime_dir):
                        runtime_dir = os.path.join(os.path.dirname(__file__), runtime_dir)
                    os.makedirs(runtime_dir, exist_ok=True)
                    return (os.path.join(runtime_dir, "pid"), os.path.join(runtime_dir, "app.lock"))
                except Exception:
                    fallback = os.path.join(os.path.dirname(__file__), "ops", "runtime")
                    os.makedirs(fallback, exist_ok=True)
                    return (os.path.join(fallback, "pid"), os.path.join(fallback, "app.lock"))

            pid_path_main, lock_path_main = _runtime_paths_main()
            print("Demarrage du Financial Bot Crypto V2...")
            print("   - Collecte de donnees en temps reel")
            print("   - Collecte historique massive si necessaire") 
            print("   - Entrainement ML periodique")
            print("   - Predictions automatiques")
            
            if hasattr(args, 'test_mode') and args.test_mode:
                print("\nMode test: demarrage puis arret automatique en 3s...")
                print("üß™ Mode test: AUCUNE collecte de donn√©es pour √©viter conflits de sch√©ma")
                # Simulation simple sans d√©marrer le scheduler r√©el
                import time
                time.sleep(3)
                print("Test demarrage/arret termine avec succes")
            else:
                print("\nUtilisez Ctrl+C pour arreter le bot.")
                
                # Forcer l'affichage imm√©diat sous Windows
                import sys
                sys.stdout.flush()
                
                # DEBUG : FORCER LA V√âRIFICATION
                print(f"\nüîç DEBUG: V√©rification premier d√©marrage...")
                sys.stdout.flush()
                is_first = _is_first_startup()
                print(f"üîç DEBUG: _is_first_startup() = {is_first}")
                sys.stdout.flush()
                
                # V√âRIFIER ET ENTRA√éNER AVANT DE LANCER LE SCHEDULER
                if is_first:
                    print("\nüöÄ PREMIER D√âMARRAGE D√âTECT√â !")
                    print("Initialisation compl√®te : Collecte ‚Üí Split ‚Üí Train ‚Üí Reassemble")
                    sys.stdout.flush()
                    
                    try:
                        _perform_initial_setup()
                    except Exception as e:
                        print(f"\n‚ùå ERREUR CRITIQUE DURANT L'INITIALISATION: {e}")
                        print("üõë ARR√äT DU BOT - R√©parez l'erreur avant de relancer")
                        sys.stdout.flush()
                        return 1  # Code d'erreur
                    
                    print("\nüéâ INITIALISATION COMPL√àTE R√âUSSIE !")
                    sys.stdout.flush()
                else:
                    print("\n‚úÖ Mod√®les d√©j√† pr√©sents - D√©marrage direct du scheduler")
                    sys.stdout.flush()
                
                print("üöÄ D√©marrage du scheduler temps r√©el...")
                scheduler = Scheduler()
                scheduler.start()
                # √âcrire pid/lock ici aussi (process courant)
                try:
                    info = {
                        "pid": os.getpid(),
                        "started_at": datetime.utcnow().isoformat()+"Z",
                        "host": socket.gethostname(),
                        "cmd": "main.py demarrer (inline scheduler)",
                        "mode": "inline"
                    }
                    with open(pid_path_main, 'w', encoding='utf-8') as f:
                        json.dump(info, f, ensure_ascii=False)
                    with open(lock_path_main, 'w', encoding='utf-8') as f:
                        f.write('LOCK\n')
                except Exception as e:
                    print(f"‚ö†Ô∏è Impossible d'√©crire pid/lock: {e}")
                
                print("‚úÖ Scheduler d√©marr√© en arri√®re-plan")
                print("üéØ Lancement du CLI interactif...")
                
                # Lancer le CLI interactif au lieu de la boucle infinie
                try:
                    print("üéØ Mode pr√©dictions interactives - Entrez vos param√®tres...")
                    _run_interactive_cli()
                except KeyboardInterrupt:
                    print("\nArret du bot en cours...")
                    scheduler.stop()
                    # Nettoyage pid/lock
                    try:
                        if os.path.exists(pid_path_main):
                            os.remove(pid_path_main)
                        if os.path.exists(lock_path_main):
                            os.remove(lock_path_main)
                    except Exception:
                        pass
                    print("Bot arrete proprement")
                except Exception as e:
                    print(f"\n‚ùå ERREUR INATTENDUE: {e}")
                    import traceback
                    traceback.print_exc()
                    scheduler.stop()
                    try:
                        if os.path.exists(pid_path_main):
                            os.remove(pid_path_main)
                        if os.path.exists(lock_path_main):
                            os.remove(lock_path_main)
                    except Exception:
                        pass
                    print("Bot arrete avec erreur")
                
        elif args.command == 'arreter':
            print("Commande d'arret recue")
            print("   (Utilisez Ctrl+C dans le terminal du bot pour l'arreter)")
            
        elif args.command == 'etat':
            from ops.cli import status
            status()
            
        elif args.command == 'collect-historical':
            from collectors.historical_collector import HistoricalCollector
            from storage.parquet_writer import ParquetWriter
            
            print("Demarrage collecte historique massive URGENTE...")
            print("   - Donnees daily: 2013-2018")
            print("   - Donnees hourly: 2018-2025") 
            print("   - Donnees 5min: dernieres 24h")
            print("   Collecte avant degradation API 1er septembre!")
            
            writer = ParquetWriter()
            collector = HistoricalCollector(writer=writer)
            
            # Mode par d√©faut: dry-run (simulation rapide)
            is_dry_run = not (hasattr(args, 'real') and args.real)
            
            # Mode test: collecte tr√®s rapide pour smoke test
            if hasattr(args, 'test_mode') and args.test_mode:
                print("\nMode TEST (test_mode=True) - collecte 30s max")
                # Simulation ultra-rapide pour smoke test
                is_dry_run = True
                print("‚úÖ Collecte historique test termin√©e en simulation")
                return
            
            if is_dry_run:
                print("\nMode SIMULATION (dry_run=True) - rapide")
            else:
                print("\nMode REEL (dry_run=False) - peut prendre du temps")
            
            results = collector.collect_all_historical(dry_run=is_dry_run)
            
            summary = results.get("summary", {})
            print(f"\nCollecte historique terminee:")
            print(f"   - Points collectes: {summary.get('total_points_collected', 0):,}")
            print(f"   - Duree: {summary.get('total_duration_minutes', 0):.1f} minutes")
            print(f"   - Taille estimee: {summary.get('estimated_size_mb', 0):.1f} MB")
            
        elif args.command == 'train':
            from prediction.trainer import Trainer
            from storage.parquet_writer import ParquetWriter
            import pandas as pd
            
            print(f"Entrainement baseline pour {args.coin}")
            
            # Mode test : utiliser donn√©es simul√©es en m√©moire
            if hasattr(args, 'test_mode') and args.test_mode:
                print("üß™ Mode test : Simulation d'entra√Ænement avec donn√©es factices")
                
                # Cr√©er donn√©es factices directement en m√©moire
                from tools.test_data_manager import TestDataManager
                test_manager = TestDataManager()
                df_test = test_manager.create_fake_five_min_data(args.coin, hours=48)
                
                print(f"   - Donn√©es test cr√©√©es: {len(df_test):,} points")
                
                # Simuler entra√Ænement
                trainer = Trainer()
                try:
                    trainer.train(df_test, args.coin, horizon_minutes=10)
                    print("‚úÖ Entra√Ænement test termin√© avec succ√®s")
                except Exception as e:
                    print(f"‚ùå Erreur entra√Ænement test: {e}")
                
                return
            
            # Mode normal : utiliser fichiers Parquet
            writer = ParquetWriter()
            trainer = Trainer()
            
            # Charger donnees recentes pour entrainement
            try:
                data_path = writer.settings["paths"]["data_parquet"]
                five_min_path = os.path.join(data_path, "five_min")
                
                if os.path.exists(five_min_path):
                    df = pd.read_parquet(five_min_path)
                    print(f"   - Donnees chargees: {len(df):,} points")
                    
                    # V√©rifier que les donn√©es contiennent la colonne coin_id
                    if 'coin_id' not in df.columns:
                        print("Erreur: colonne 'coin_id' manquante dans les donn√©es")
                        return
                    
                    # Entrainer pour le coin specifie
                    if len(df) == 0:
                        print("Aucune donnee disponible pour l'entrainement")
                    elif args.coin in df['coin_id'].unique():
                        print(f"   - Entrainement {args.coin}...")
                        coin_data = df[df['coin_id'] == args.coin].sort_values('ts_utc_ms')
                        if len(coin_data) > 100:
                            trainer.train(coin_data, args.coin, horizon_minutes=10)
                            print("Entrainement complete termine")
                        else:
                            print(f"Pas assez de donnees pour {args.coin}")
                    else:
                        print(f"Coin {args.coin} non trouve dans les donnees")
                    
                else:
                    print("Aucune donnee disponible pour l'entrainement")
                    
            except Exception as e:
                print(f"Erreur entrainement: {e}")
                
        elif args.command == 'train-incremental':
            from prediction.incremental_trainer import IncrementalTrainer
            
            print(f"Entrainement incremental mode: {args.mode}")
            
            trainer = IncrementalTrainer()
            if args.mode == 'micro':
                # Micro update n√©cessite des donn√©es, simulons
                print("Mode micro - simulation (pas de donnees recentes)")
            elif args.mode == 'mini':
                # Mini retrain n√©cessite des donn√©es, simulons
                print("Mode mini - simulation (pas de donnees recentes)")
            elif args.mode == 'schedule':
                # Schedule fonctionne sans donn√©es
                schedule = trainer.get_training_schedule(['bitcoin', 'ethereum'])
                print(f"Calendrier genere: {len(schedule)} taches")
                
        elif args.command == 'prevoir':
            from ops.cli import predict
            print(f"Prediction {args.coin} +{args.value}{args.unit}")
            if hasattr(args, 'amount_eur') and args.amount_eur:
                print(f"Montant: {args.amount_eur} EUR")
            
            # V√©rifier mode test
            test_mode = hasattr(args, 'test_mode') and args.test_mode
            
            # Appeler predict directement avec les param√®tres  
            predict(
                kind=args.kind,
                coin_opt=args.coin,
                unit_opt=args.unit,
                value_opt=args.value,
                amount_eur_opt=getattr(args, 'amount_eur', None),
                test_mode=test_mode
            )
            
        elif args.command == 'confidence-metrics':
            from prediction.confidence import ConfidenceEstimator
            from storage.parquet_writer import ParquetWriter
            
            print(f"Metriques de confiance pour {args.coin} (horizon {args.horizon}min)")
            
            writer = ParquetWriter()
            estimator = ConfidenceEstimator()
            
            try:
                metrics = estimator.get_confidence_metrics(
                    coin_id=args.coin,
                    horizon_minutes=args.horizon
                )
                
                print(f"\nResultats pour {args.coin}:")
                print(f"   - Confiance globale: {metrics.get('calibrated_mae_pct', 0)*100:.2f}%")
                print(f"   - Precision historique: {metrics.get('historical_mae_pct', 0)*100:.2f}%")
                print(f"   - Incertitude: {metrics.get('calibrated_uncertainty_pct', 0)*100:.2f}%")
                print(f"   - Volatilite: {metrics.get('historical_volatility_pct', 0)*100:.2f}%")
                print(f"   - Seuil configure: {metrics.get('threshold_pct', 0)*100:.2f}%")
                print(f"   - Donnees historiques: {'‚úÖ Oui' if metrics.get('has_historical_data', False) else '‚ùå Non'}")
                
            except Exception as e:
                print(f"Erreur calcul metriques: {e}")
                import traceback
                traceback.print_exc()
                
        elif args.command == 'models':
            from prediction.model_store import ModelStore
            
            print("Modeles ML disponibles:")
            
            store = ModelStore()
            models = store.list_models()
            
            if models:
                for model_path in models:
                    # Extraire les infos du nom de fichier
                    filename = os.path.basename(model_path)
                    if '__' in filename:
                        parts = filename.replace('.pkl', '').split('__')
                        coin = parts[0] if len(parts) > 0 else 'unknown'
                        horizon = parts[1] if len(parts) > 1 else 'unknown'
                        print(f"   - {coin} (horizon {horizon}): {model_path}")
                    else:
                        print(f"   - {model_path}")
            else:
                print("   Aucun modele disponible. Lancez l'entrainement d'abord.")
                
        elif args.command == 'parametres':
            from ops.cli import settings
            settings()
            
        else:
            print(f"Commande inconnue: {args.command}")
            parser.print_help()
            
    except Exception as e:
        print(f"Erreur: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
